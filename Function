def levenshtein(patro, text, dlt = 2, insr = 2, subs = 1):
    if len(patro) > len(text): 
        patro, text = text, patro
    if len(text) == 0: 
        return len(patro)
    patro_length = len(patro) + 1
    text_length = len(text) + 1
    distance_matrix = [[0] * text_length for x in range(patro_length)]
    letter_matrix = [[0] * text_length for x in range(patro_length)]
    for i in range(patro_length): 
        distance_matrix[i][0] = i
        letter_matrix[i][0] = 'D'
    for j in range(text_length): 
        distance_matrix[0][j] = 0
        letter_matrix[0][j] = 'I'
    letter_matrix[0][0] = 'S'
    for i in range(1, patro_length):
        for j in range(1, text_length):
            deletion = distance_matrix[i-1][j] + dlt
            insertion = distance_matrix[i][j-1] + insr
            substitution = distance_matrix[i-1][j-1]
            if patro[i-1] != text[j-1]: 
                substitution += subs
            distance_matrix[i][j] = min(insertion,deletion,substitution)
            #Omplo la matriu letter_matrix[i][j]
            if distance_matrix[i][j] == substitution:
                letter_matrix[i][j] = 'C'
                if distance_matrix[i-1][j-1] + subs == substitution:
                    letter_matrix[i][j] = 'S'
            elif distance_matrix[i][j] == insertion: 
                letter_matrix[i][j] = 'I'
            else:
                letter_matrix[i][j] = 'D'
    #Faig backtracking
    cadena = []
    distancia_minima = min(distance_matrix[patro_length-1])
    posiciof = distance_matrix[patro_length-1].index(distancia_minima)
    i, j = patro_length-1, posiciof
    while i > 0:
        cadena.append(letter_matrix[i][j])
        if letter_matrix[i][j] == 'D':
            i = i - 1
        elif letter_matrix[i][j] == 'I':
            j = j - 1
        else:
            i = i - 1
            j = j - 1
    posicio0 = j
    return distancia_minima, posicio0, posiciof, cadena[::-1]
    
def dna(patro, fitxer='HUMAN-DNA.txt'):
    with open(fitxer,'r') as f:
        text = f.read()
        lines = text.split('\n')
    distancia_final = len(lines[0])
    cami = []
    cami_min = []
    for line in lines:
        dist, pos0, posf, cami = levenshtein(patro,line)
        if dist < distancia_final :
            distancia_final = dist
            linia = lines.index(line)
            posicio = (pos0, posf)
            cami_min = cami
    return linia, posicio, distancia_final, cami_min

